#include <iostream>

using namespace std;

struct graph      
{ 
    // vertices 
    int v;          
      
    // edges 
    int e;          
      
    // direction from src to des 
    int **dir;      
}; 

struct graph *createGraph(int v,int e) 
{    
    // G is a pointer of a graph 
    struct graph *G = new graph;  
      
    G->v = v; 
    G->e = e; 
      
    // allocate memory 
    G->dir = new int*[v]; 
      
    for (int i = 0;i < v;i++) 
        G->dir[i] = new int[v]; 
      
    /*  0-----1 
        | \   | 
        |  \  | 
        |   \ | 
        2-----3     */
      
      
    //direction from 0 
    G->dir[0][1]=1; 
    G->dir[0][2]=1; 
    G->dir[0][3]=1; 
      
    //direction from 1 
    G->dir[1][0]=1; 
    G->dir[1][3]=1; 
      
    //direction from 2 
    G->dir[2][0]=1; 
    G->dir[2][3]=1; 
      
    //direction from 3 
    G->dir[3][0]=1; 
    G->dir[3][1]=1; 
    G->dir[3][2]=1; 
      
    return G; 
      
} 

int findDegree(struct graph *G, int ver);


int main()
{
    int vertices = 0;
    int edges = 0;
    
    cout << "To create a graph first enter the number of vertices : " << endl;
    cin >> vertices;
    if (vertices < 0)
    {
        cout << "Error 452: Incorrect input - retry with a positive integer" << endl;
    }
    
    cout << "Next input the number of edges you would like to add : " << endl;
    cin >> edges;
    if (edges < 0)
    {
        cout <<"Error 452: Incorrect input - retry with a positive integer" << endl;
    }
    
    cout << "This graph currently has " << vertices << " vertices and " << edges << " edges. " << endl;
    
    struct graph *G = createGraph(vertices, edges);
    
    int ver = 0;  
      
    int degree = findDegree(G, ver); 
    cout << degree << "\n";
    
    return 0;
}

int findDegree(struct graph *G, int ver) 
{     
    // Traverse through row of ver and count 
    // all connected cells (with value 1) 
    int degree = 0;          
    for (int i=0; i<G->v; i++)      
  
        // if src to des is 1 the degree count 
        if (G-> dir[ver][i] == 1)  
            degree++;              
      
    return degree;          
} 
